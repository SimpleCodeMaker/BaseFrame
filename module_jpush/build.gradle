//def isComponent = moduleConfig.module_jpush.isComponent
//def appId = moduleConfig.module_jpush.appId
//if (isComponent) {
    apply plugin: 'com.android.library'
//} else {
//    apply plugin: 'com.android.application'
//}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion androidConfig.compileSdkVersion
    defaultConfig {
//        if (!isComponent) {
//            applicationId "$appId"
//        }

        minSdkVersion androidConfig.minSdkVersion
        targetSdkVersion androidConfig.targetSdkVersion
        versionCode androidConfig.versionCode
        versionName androidConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }

//        manifestPlaceholders = [
//                JPUSH_PKGNAME : moduleConfig.app.appId,
//                JPUSH_APPKEY : "da1bdb3123d338d4e1c5b40c", //JPush 上注册的包名对应的 Appkey.
//                JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
//        ]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
//    kapt "com.alibaba:arouter-compiler:$arouter_compiler_version"
//    implementation project(path: ':projectcode')
    // For Kotlin use kapt instead of annotationProcessor
    //这是个深坑，所有需要注解的  都必须使用到的地方  加kapt  不能只在最上层加
    //api 就可以不用每个都加  最上层加就行
//    kapt 'androidx.room:room-compiler:2.0.0'
    
}
